use macroquad::prelude::*;

const RADIUS:f32 = 18.0;
const AMOUNT: u32 = 2_00;
const GRAVITY_POWER: f32 = 8.0;
const COLORS: [(u8, u8, u8, u8); 422] = [(240, 248, 255, 255), (0, 255, 255, 255), (127, 255, 212, 255), (127, 255, 212, 255), (118, 238, 198, 255), (102, 205, 170, 255), (69, 139, 116, 255), (240, 255, 255, 255), (240, 255, 255, 255), (193, 205, 205, 255), (224, 238, 238, 255), (131, 139, 139, 255), (245, 245, 220, 255), (255, 228, 196, 255), (255, 228, 196, 255), (238, 213, 183, 255), (205, 183, 158, 255), (139, 125, 107, 255), (0, 0, 0, 255), (255, 235, 205, 255), (0, 0, 255, 255), (0, 0, 255, 255), (0, 0, 238, 255), (0, 0, 205, 255), (0, 0, 139, 255), (138, 43, 226, 255), (165, 42, 42, 255), (255, 64, 64, 255), (238, 59, 59, 255), (205, 51, 51, 255), (139, 35, 35, 255), (222, 184, 135, 255), (255, 211, 155, 255), (238, 197, 145, 255), (205, 170, 125, 255), (139, 115, 85, 255), (95, 158, 160, 255), (152, 245, 255, 255), (142, 229, 238, 255), (122, 197, 205, 255), (83, 134, 139, 255), (127, 255, 0, 255), (127, 255, 0, 255), (118, 238, 0, 255), (102, 205, 0, 255), (69, 139, 0, 255), (210, 105, 30, 255), (255, 127, 36, 255), (238, 118, 33, 255), (205, 102, 29, 255), (139, 69, 19, 255), (255, 127, 80, 255), (255, 114, 86, 255), (238, 106, 80, 255), (205, 91, 69, 255), (139, 62, 47, 255), (100, 149, 237, 255), (255, 248, 220, 255), (255, 248, 220, 255), (238, 232, 205, 255), (205, 200, 177, 255), (139, 136, 120, 255), (220, 20, 60, 255), (0, 255, 255, 255), (0, 255, 255, 255), (0, 238, 238, 255), (0, 205, 205, 255), (0, 139, 139, 255), (0, 0, 139, 255), (0, 139, 139, 255), (184, 134, 11, 255), (255, 185, 15, 255), (238, 173, 14, 255), (205, 149, 12, 255), (139, 101, 8, 255), (0, 100, 0, 255), (189, 183, 107, 255), (139, 0, 139, 255), (85, 107, 47, 255), (202, 255, 112, 255), (188, 238, 104, 255), (162, 205, 90, 255), (110, 139, 61, 255), (255, 140, 0, 255), (255, 127, 0, 255), (238, 118, 0, 255), (205, 102, 0, 255), (139, 69, 0, 255), (153, 50, 204, 255), (191, 62, 255, 255), (178, 58, 238, 255), (154, 50, 205, 255), (104, 34, 139, 255), (139, 0, 0, 255), (233, 150, 122, 255), (143, 188, 143, 255), (193, 255, 193, 255), (180, 238, 180, 255), (155, 205, 155, 255), (105, 139, 105, 255), (72, 61, 139, 255), (0, 206, 209, 255), (148, 0, 211, 255), (255, 20, 147, 255), (255, 20, 147, 255), (238, 18, 137, 255), (205, 16, 118, 255), (139, 10, 80, 255), (0, 191, 255, 255), (0, 191, 255, 255), (0, 178, 238, 255), (0, 154, 205, 255), (0, 104, 139, 255), (30, 144, 255, 255), (30, 144, 255, 255), (28, 134, 238, 255), (24, 116, 205, 255), (16, 78, 139, 255), (178, 34, 34, 255), (255, 48, 48, 255), (238, 44, 44, 255), (205, 38, 38, 255), (139, 26, 26, 255), (34, 139, 34, 255), (255, 0, 255, 255), (220, 220, 220, 255), (255, 215, 0, 255), (255, 215, 0, 255), (238, 201, 0, 255), (205, 173, 0, 255), (139, 117, 0, 255), (218, 165, 32, 255), (255, 193, 37, 255), (238, 180, 34, 255), (205, 155, 29, 255), (139, 105, 20, 255), (0, 255, 0, 255), (0, 255, 0, 255), (0, 238, 0, 255), (0, 205, 0, 255), (0, 139, 0, 255), (173, 255, 47, 255), (240, 255, 240, 255), (240, 255, 240, 255), (224, 238, 224, 255), (193, 205, 193, 255), (131, 139, 131, 255), (255, 105, 180, 255), (255, 110, 180, 255), (238, 106, 167, 255), (205, 96, 144, 255), (139, 58, 98, 255), (205, 92, 92, 255), (255, 106, 106, 255), (238, 99, 99, 255), (205, 85, 85, 255), (139, 58, 58, 255), (75, 0, 130, 255), (255, 255, 240, 255), (255, 255, 240, 255), (238, 238, 224, 255), (205, 205, 193, 255), (139, 139, 131, 255), (240, 230, 140, 255), (255, 246, 143, 255), (238, 230, 133, 255), (205, 198, 115, 255), (139, 134, 78, 255), (230, 230, 250, 255), (255, 240, 245, 255), (255, 240, 245, 255), (238, 224, 229, 255), (205, 193, 197, 255), (139, 131, 134, 255), (124, 252, 0, 255), (255, 250, 205, 255), (255, 250, 205, 255), (238, 233, 191, 255), (205, 201, 165, 255), (139, 137, 112, 255), (173, 216, 230, 255), (191, 239, 255, 255), (178, 223, 238, 255), (154, 192, 205, 255), (104, 131, 139, 255), (240, 128, 128, 255), (224, 255, 255, 255), (224, 255, 255, 255), (209, 238, 238, 255), (180, 205, 205, 255), (122, 139, 139, 255), (238, 221, 130, 255), (255, 236, 139, 255), (238, 220, 130, 255), (205, 190, 112, 255), (139, 129, 76, 255), (250, 250, 210, 255), (144, 238, 144, 255), (255, 182, 193, 255), (255, 174, 185, 255), (238, 162, 173, 255), (205, 140, 149, 255), (139, 95, 101, 255), (255, 160, 122, 255), (255, 160, 122, 255), (238, 149, 114, 255), (205, 129, 98, 255), (139, 87, 66, 255), (32, 178, 170, 255), (135, 206, 250, 255), (176, 226, 255, 255), (164, 211, 238, 255), (141, 182, 205, 255), (96, 123, 139, 255), (132, 112, 255, 255), (176, 196, 222, 255), (202, 225, 255, 255), (188, 210, 238, 255), (162, 181, 205, 255), (110, 123, 139, 255), (255, 255, 224, 255), (255, 255, 224, 255), (238, 238, 209, 255), (205, 205, 180, 255), (139, 139, 122, 255), (250, 240, 230, 255), (0, 255, 0, 255), (50, 205, 50, 255), (255, 0, 255, 255), (255, 0, 255, 255), (238, 0, 238, 255), (205, 0, 205, 255), (139, 0, 139, 255), (176, 48, 96, 255), (255, 52, 179, 255), (238, 48, 167, 255), (205, 41, 144, 255), (139, 28, 98, 255), (102, 205, 170, 255), (0, 0, 205, 255), (186, 85, 211, 255), (224, 102, 255, 255), (209, 95, 238, 255), (180, 82, 205, 255), (122, 55, 139, 255), (147, 112, 219, 255), (171, 130, 255, 255), (159, 121, 238, 255), (137, 104, 205, 255), (93, 71, 139, 255), (60, 179, 113, 255), (123, 104, 238, 255), (0, 250, 154, 255), (72, 209, 204, 255), (199, 21, 133, 255), (25, 25, 112, 255), (245, 255, 250, 255), (255, 228, 225, 255), (255, 228, 225, 255), (238, 213, 210, 255), (205, 183, 181, 255), (139, 125, 123, 255), (255, 228, 181, 255), (0, 0, 128, 255), (0, 0, 128, 255), (253, 245, 230, 255), (128, 128, 0, 255), (107, 142, 35, 255), (192, 255, 62, 255), (179, 238, 58, 255), (154, 205, 50, 255), (105, 139, 34, 255), (255, 165, 0, 255), (255, 165, 0, 255), (238, 154, 0, 255), (205, 133, 0, 255), (139, 90, 0, 255), (255, 69, 0, 255), (255, 69, 0, 255), (238, 64, 0, 255), (205, 55, 0, 255), (139, 37, 0, 255), (218, 112, 214, 255), (255, 131, 250, 255), (238, 122, 233, 255), (205, 105, 201, 255), (139, 71, 137, 255), (152, 251, 152, 255), (154, 255, 154, 255), (144, 238, 144, 255), (124, 205, 124, 255), (84, 139, 84, 255), (238, 232, 170, 255), (175, 238, 238, 255), (187, 255, 255, 255), (174, 238, 238, 255), (150, 205, 205, 255), (102, 139, 139, 255), (219, 112, 147, 255), (255, 130, 171, 255), (238, 121, 159, 255), (205, 104, 137, 255), (139, 71, 93, 255), (255, 239, 213, 255), (255, 218, 185, 255), (255, 218, 185, 255), (238, 203, 173, 255), (205, 175, 149, 255), (139, 119, 101, 255), (205, 133, 63, 255), (255, 192, 203, 255), (255, 181, 197, 255), (238, 169, 184, 255), (205, 145, 158, 255), (139, 99, 108, 255), (221, 160, 221, 255), (255, 187, 255, 255), (238, 174, 238, 255), (205, 150, 205, 255), (139, 102, 139, 255), (176, 224, 230, 255), (160, 32, 240, 255), (155, 48, 255, 255), (145, 44, 238, 255), (125, 38, 205, 255), (85, 26, 139, 255), (255, 0, 0, 255), (255, 0, 0, 255), (238, 0, 0, 255), (205, 0, 0, 255), (139, 0, 0, 255), (188, 143, 143, 255), (255, 193, 193, 255), (238, 180, 180, 255), (205, 155, 155, 255), (139, 105, 105, 255), (65, 105, 225, 255), (72, 118, 255, 255), (67, 110, 238, 255), (58, 95, 205, 255), (39, 64, 139, 255), (250, 128, 114, 255), (255, 140, 105, 255), (238, 130, 98, 255), (205, 112, 84, 255), (139, 76, 57, 255), (139, 69, 19, 255), (244, 164, 96, 255), (46, 139, 87, 255), (84, 255, 159, 255), (78, 238, 148, 255), (67, 205, 128, 255), (46, 139, 87, 255), (255, 245, 238, 255), (255, 245, 238, 255), (238, 229, 222, 255), (205, 197, 191, 255), (139, 134, 130, 255), (160, 82, 45, 255), (255, 130, 71, 255), (238, 121, 66, 255), (205, 104, 57, 255), (139, 71, 38, 255), (192, 192, 192, 255), (135, 206, 235, 255), (135, 206, 255, 255), (126, 192, 238, 255), (108, 166, 205, 255), (74, 112, 139, 255), (106, 90, 205, 255), (131, 111, 255, 255), (122, 103, 238, 255), (105, 89, 205, 255), (71, 60, 139, 255), (0, 255, 127, 255), (0, 255, 127, 255), (0, 238, 118, 255), (0, 205, 102, 255), (0, 139, 69, 255), (70, 130, 180, 255), (99, 184, 255, 255), (92, 172, 238, 255), (79, 148, 205, 255), (54, 100, 139, 255), (210, 180, 140, 255), (255, 165, 79, 255), (238, 154, 73, 255), (205, 133, 63, 255), (139, 90, 43, 255), (0, 128, 128, 255), (216, 191, 216, 255), (255, 225, 255, 255), (238, 210, 238, 255), (205, 181, 205, 255), (139, 123, 139, 255), (255, 99, 71, 255), (255, 99, 71, 255), (238, 92, 66, 255), (205, 79, 57, 255), (139, 54, 38, 255), (64, 224, 208, 255), (0, 245, 255, 255), (0, 229, 238, 255), (0, 197, 205, 255), (0, 134, 139, 255), (238, 130, 238, 255), (208, 32, 144, 255), (255, 62, 150, 255), (238, 58, 140, 255), (205, 50, 120, 255), (139, 34, 82, 255), (245, 222, 179, 255), (255, 231, 186, 255), (238, 216, 174, 255), (205, 186, 150, 255), (139, 126, 102, 255), (255, 255, 0, 255), (255, 255, 0, 255), (238, 238, 0, 255), (205, 205, 0, 255), (139, 139, 0, 255), (154, 205, 50, 255)];
// COLORS = [c for c in  THECOLORS.keys() if not ('grey' in c or 'gray' in c or 'snow' in c or 'white' in c)]
// COLORS = [THECOLORS[c] for c in  COLORS] # Colors generated from pygame

struct Shape{

    pos: Vec2,
    speed: f32,
    direction: Vec2,
    sides: u8,
    radius: f32,
    rotation: f32,
    ang_vel: f32,
    color: Color,

} impl Shape{

    pub fn new(pos:Vec2, speed:f32, direction:Vec2, sides:u8, radius:f32, rotation:f32, ang_vel:f32, color:Color) -> Self{
        Self{pos, speed, direction, sides, radius, rotation, ang_vel, color}
    }

    pub fn draw(&self){

        match self.sides{

            2 => draw_circle(self.pos.x, self.pos.y, self.radius, self.color),
            _ => draw_poly(self.pos.x, self.pos.y, self.sides, self.radius, self.rotation, self.color)
        };
    }

    pub fn update(&mut self, gravity: &Vec2, toggle_movement:bool, toggle_rotation:bool, toggle_gravity:bool){

        if toggle_movement{
            self.pos += self.direction*self.speed;
        }
        if toggle_gravity{
            self.pos.x += gravity.x*GRAVITY_POWER;
            self.pos.y += gravity.y*GRAVITY_POWER;
        }
        if toggle_rotation{
            self.rotation += self.ang_vel;
        }

        if self.pos.x - self.radius/2.0 > screen_width(){
            self.pos.x = -self.radius/2.0;
        }else if self.pos.x + self.radius/2.0 < 0.0{
            self.pos.x = self.radius/2.0 + screen_width()
        }
        if self.pos.y - self.radius/2.0 > screen_height(){
            self.pos.y = -self.radius/2.0;
        }else if self.pos.y + self.radius/2.0 < 0.0{
            self.pos.y = self.radius/2.0 + screen_height()
        }
        
    }
}

fn init_shapes(shapes :&mut Vec<Shape>) -> (){
    for _ in 0..AMOUNT{

        let pos = Vec2::from((rand::gen_range(0, screen_width() as i32)as f32, rand::gen_range(0, screen_height() as i32) as f32));
        let speed = rand::gen_range(3, 6) as f32;
        let sides = rand::gen_range(2,7) as u8;
        let ang_vel = rand::gen_range(-3,3) as f32;
        let angle = rand::gen_range(0, 360) as f32;
        let direction = Vec2::new(angle.cos(), angle.sin());

        // let colors = vec![BLACK, BLUE, GRAY, GREEN, YELLOW, RED, PURPLE, PINK, MAGENTA, BROWN];
        // let color = colors[rand::gen_range(0, colors.len())];
        let color = COLORS[rand::gen_range(0, COLORS.len())];

        shapes.push(Shape::new(pos, speed, direction, sides, RADIUS, angle, ang_vel, Color::from_rgba(color.0, color.1, color.2, color.3)));
    }
}

fn rect_point_collide(x:f32, y:f32, w:f32, h:f32, p1: (f32, f32)) -> bool{

    p1.0 >= x && p1.0 <= x+w && p1.1 >= y && p1.1 <= y+h
}

fn draw_button(x:f32, y:f32, w:f32, h:f32, trigger:bool, label: &str, size:f32){

    let color = if trigger{BLUE} else {RED};

    draw_rectangle_lines(x, y, w, h, 5.0, color);
    draw_text(label, x+size/4.0, y+size-size/4.0, size, color);
}

#[macroquad::main("gravity_shapes")]
async fn main() {


    request_new_screen_size(1280.0, 720.0);
    next_frame().await;
    let mut shapes: Vec<Shape> = Vec::new();
    let mut gravity: Vec2 = Vec2::new(1.0, 0.0);
    let mut toggle_movement = true;
    let mut toggle_rotation = true;
    let mut toggle_gravity = false;

    init_shapes(&mut shapes);

    loop {

        // update

        let mut exit = false;
        let screen_w: f32 = screen_width();
        let screen_h: f32 = screen_height();
        let clicked = is_mouse_button_pressed(MouseButton::Left);
        let mut display_text = "";
        let buttons: [f32; 4] = [screen_w/5.0*1.0 - 25.0, screen_w/5.0*2.0 - 25.0, screen_w/5.0*3.0 - 25.0, screen_w/5.0*4.0 - 25.0];

        if is_key_pressed(KeyCode::Left){gravity = Vec2::new(-1.0, 0.0);}
        if is_key_pressed(KeyCode::Right){gravity = Vec2::new(1.0, 0.0);}
        if is_key_pressed(KeyCode::Up){gravity = Vec2::new(0.0, -1.0);}
        if is_key_pressed(KeyCode::Down){gravity = Vec2::new(0.0, 1.0);}

        if is_key_pressed(KeyCode::M) || is_key_pressed(KeyCode::Enter){
            toggle_movement = !toggle_movement;
        }
        if is_key_pressed(KeyCode::R) || is_key_pressed(KeyCode::LeftShift) || is_key_pressed(KeyCode::RightShift){
            toggle_rotation = !toggle_rotation;
        }
        if is_key_pressed(KeyCode::G) || is_key_pressed(KeyCode::Space){
            toggle_gravity = !toggle_gravity;
        }
        if is_key_pressed(KeyCode::Q) || is_key_pressed(KeyCode::Escape){
            exit = true;
        }
        
        for shape in shapes.iter_mut(){
            shape.update(&gravity, toggle_movement, toggle_rotation, toggle_gravity);
        }

        let mut hover_on_button = false;

        for i in 0..buttons.len(){
            if ! rect_point_collide(buttons[i], 25.0, 50.0, 50.0, mouse_position()){continue}
            match i {
                0 => {
                    display_text = "Toggle Gravity";
                    if clicked { toggle_gravity = !toggle_gravity;}
                }
                1 => {
                    display_text = "Toggle Movement";
                    if clicked { toggle_movement = !toggle_movement;}
                }
                2 => {
                    display_text = "Toggle Rotation";
                    if clicked { toggle_rotation = !toggle_rotation;}
                }
                3 => {
                    display_text = "Quit";
                    if clicked { exit = true; }
                }
                _ => ()
            }
            hover_on_button = true;
            break
        }

        if !hover_on_button { display_text = "" }

        if is_mouse_button_down(MouseButton::Left)  && !hover_on_button{
            let vect = Vec2::new(mouse_position().0 - screen_w/2.0, mouse_position().1 - screen_h/2.0);
            gravity = vect.normalize();
        }

        // draw

        clear_background(LIGHTGRAY);

        for shape in shapes.iter(){
            shape.draw();
        }

        let color = if toggle_gravity{GRAY} else {RED};
        if is_mouse_button_down(MouseButton::Left) && !hover_on_button {
            draw_circle_lines(screen_w/2.0, screen_h/2.0, 220.0, 5.0, color);
            draw_circle(screen_w/2.0 + gravity.x*220.0, screen_h/2.0 + gravity.y*220.0, 16.0, color);
        }

        draw_button(buttons[0], 25.0, 50.0, 50.0, toggle_gravity, "G", 48.0);
        draw_button(buttons[1], 25.0, 50.0, 50.0, toggle_movement, "M", 48.0);
        draw_button(buttons[2], 25.0, 50.0, 50.0, toggle_rotation, "R", 48.0);
        draw_button(buttons[3], 25.0, 50.0, 50.0, false, "Q", 48.0);

        let text_dim = measure_text(display_text, None, 48, 1.0);
        draw_text(display_text, screen_w/2.0 - text_dim.width/2.0, screen_h - 25.0, 48.0, BLUE);
        
        draw_text(&format!("{}", get_fps()), 10.0, 26.0, 32.0, BLACK);

        if exit{ break }

        next_frame().await;
    }

}
