# raylib Program C API
from raylib import *
from raylib import colors as c
from math import sin, cos, atan2, radians, degrees
from random import randint, choice
# from pygame.colordict import THECOLORS

def get_abs_angle(angle:float) -> float:
    angle %= 360
    if angle < 0:
        return 360 + angle
    return angle

class SpaceObject:
    def __init__(self, pos:tuple[int,int], speed:int, direction_angle:int, radius:int, sides:int, color:c, angular_speed:int):
        self.pos = list(pos)
        self.speed = speed
        self.direction_angle = direction_angle
        self.radius = radius
        self.sides = sides # 3, 4, 5, 6
        self.color = color
        self.angular_speed = angular_speed
        self.angle = 0

    def update(self):

        if rotation_bool:
            self.angle += self.angular_speed
        if motion_bool:
            angle = radians(self.direction_angle)
            self.pos[0] += self.speed * cos(angle)
            self.pos[1] += self.speed * sin(angle)
        if gravity_bool:
            g_angle = radians(gravity_angle) - radians(90)
            self.pos[0] += 9.8 * cos(g_angle)
            self.pos[1] += 9.8 * sin(g_angle)

        if self.pos[0]-self.radius > W:
            self.pos[0] = 0-self.radius
        elif self.pos[0]+self.radius < 0:
            self.pos[0] = W+self.radius
        if self.pos[1]-self.radius > H:
            self.pos[1] = 0-self.radius
        elif self.pos[1]+self.radius < 0:
            self.pos[1] = H+self.radius

    def draw(self):

        DrawPoly(self.pos, self.sides, self.radius, self.angle, self.color)

class SpaceObjectGroup:

    def __init__(self):
        self.objects = []

    def add(self, obj:SpaceObject):
        self.objects.append(obj)

    def update(self):
        for obj in self.objects:
            obj.update()

    def draw(self):
        for obj in self.objects:
            obj.draw()

def get_gravity_angle() -> float:
    #returns angle in degrees
    return degrees(atan2(MouseY-H/2, MouseX-W/2)) + 90

def pointer_coords() -> tuple[float, float]:

    g_angle = radians(gravity_angle) - radians(90)
    y = sin(g_angle)* 150 + H/2
    x = cos(g_angle)* 150 + W/2
    return (x, y)

def draw_ui():
    
    DrawText(bytes(f'{int(get_abs_angle(gravity_angle))}Â°','utf-8'), W//2-10, H//2-10, 30, g_col)
    DrawCircleLines(W//2, H//2, 150, g_col)
    x, y = pointer_coords()
    DrawCircleV((x, y), 10, g_col)

def draw_button():
    
    for key, rect in buttons.items():

        if key == 'G':
            col = g_col
        elif key == 'M':
            col = (80,80,80,255) if motion_bool else c.RED
        elif key == 'R':
            col = (80,80,80,255) if rotation_bool else c.RED
        elif key == 'Q':
            col = c.RED

        DrawRectangleLinesEx(rect, 4, col)
        DrawText(bytes(key, 'utf-8'), rect[0]+16, rect[1]+12, 30, col)

#inits
# W,H = 720,1080
screen = InitWindow(0, 0, b"Gravity Shapes")
W,H = GetScreenWidth(),GetScreenHeight()
SetWindowState(FLAG_FULLSCREEN_MODE|FLAG_VSYNC_HINT)
SetTargetFPS(60)

#variables
objects_in_space = 40
obj_grp = SpaceObjectGroup()
gravity_angle = 0
gravity_bool = False
motion_bool = True
rotation_bool = True
ExitIt = False
# COLORS = [c for c in  THECOLORS.keys() if not ('grey' in c or 'gray' in c or 'snow' in c or 'white' in c)]
# COLORS = [THECOLORS[c] for c in  COLORS] # Please don't hate me, I didn't want to import pygame

COLORS = [(240, 248, 255, 255), (0, 255, 255, 255), (127, 255, 212, 255), (127, 255, 212, 255), (118, 238, 198, 255), (102, 205, 170, 255), (69, 139, 116, 255), (240, 255, 255, 255), (240, 255, 255, 255), (193, 205, 205, 255), (224, 238, 238, 255), (131, 139, 139, 255), (245, 245, 220, 255), (255, 228, 196, 255), (255, 228, 196, 255), (238, 213, 183, 255), (205, 183, 158, 255), (139, 125, 107, 255), (0, 0, 0, 255), (255, 235, 205, 255), (0, 0, 255, 255), (0, 0, 255, 255), (0, 0, 238, 255), (0, 0, 205, 255), (0, 0, 139, 255), (138, 43, 226, 255), (165, 42, 42, 255), (255, 64, 64, 255), (238, 59, 59, 255), (205, 51, 51, 255), (139, 35, 35, 255), (222, 184, 135, 255), (255, 211, 155, 255), (238, 197, 145, 255), (205, 170, 125, 255), (139, 115, 85, 255), (95, 158, 160, 255), (152, 245, 255, 255), (142, 229, 238, 255), (122, 197, 205, 255), (83, 134, 139, 255), (127, 255, 0, 255), (127, 255, 0, 255), (118, 238, 0, 255), (102, 205, 0, 255), (69, 139, 0, 255), (210, 105, 30, 255), (255, 127, 36, 255), (238, 118, 33, 255), (205, 102, 29, 255), (139, 69, 19, 255), (255, 127, 80, 255), (255, 114, 86, 255), (238, 106, 80, 255), (205, 91, 69, 255), (139, 62, 47, 255), (100, 149, 237, 255), (255, 248, 220, 255), (255, 248, 220, 255), (238, 232, 205, 255), (205, 200, 177, 255), (139, 136, 120, 255), (220, 20, 60, 255), (0, 255, 255, 255), (0, 255, 255, 255), (0, 238, 238, 255), (0, 205, 205, 255), (0, 139, 139, 255), (0, 0, 139, 255), (0, 139, 139, 255), (184, 134, 11, 255), (255, 185, 15, 255), (238, 173, 14, 255), (205, 149, 12, 255), (139, 101, 8, 255), (0, 100, 0, 255), (189, 183, 107, 255), (139, 0, 139, 255), (85, 107, 47, 255), (202, 255, 112, 255), (188, 238, 104, 255), (162, 205, 90, 255), (110, 139, 61, 255), (255, 140, 0, 255), (255, 127, 0, 255), (238, 118, 0, 255), (205, 102, 0, 255), (139, 69, 0, 255), (153, 50, 204, 255), (191, 62, 255, 255), (178, 58, 238, 255), (154, 50, 205, 255), (104, 34, 139, 255), (139, 0, 0, 255), (233, 150, 122, 255), (143, 188, 143, 255), (193, 255, 193, 255), (180, 238, 180, 255), (155, 205, 155, 255), (105, 139, 105, 255), (72, 61, 139, 255), (0, 206, 209, 255), (148, 0, 211, 255), (255, 20, 147, 255), (255, 20, 147, 255), (238, 18, 137, 255), (205, 16, 118, 255), (139, 10, 80, 255), (0, 191, 255, 255), (0, 191, 255, 255), (0, 178, 238, 255), (0, 154, 205, 255), (0, 104, 139, 255), (30, 144, 255, 255), (30, 144, 255, 255), (28, 134, 238, 255), (24, 116, 205, 255), (16, 78, 139, 255), (178, 34, 34, 255), (255, 48, 48, 255), (238, 44, 44, 255), (205, 38, 38, 255), (139, 26, 26, 255), (34, 139, 34, 255), (255, 0, 255, 255), (220, 220, 220, 255), (255, 215, 0, 255), (255, 215, 0, 255), (238, 201, 0, 255), (205, 173, 0, 255), (139, 117, 0, 255), (218, 165, 32, 255), (255, 193, 37, 255), (238, 180, 34, 255), (205, 155, 29, 255), (139, 105, 20, 255), (0, 255, 0, 255), (0, 255, 0, 255), (0, 238, 0, 255), (0, 205, 0, 255), (0, 139, 0, 255), (173, 255, 47, 255), (240, 255, 240, 255), (240, 255, 240, 255), (224, 238, 224, 255), (193, 205, 193, 255), (131, 139, 131, 255), (255, 105, 180, 255), (255, 110, 180, 255), (238, 106, 167, 255), (205, 96, 144, 255), (139, 58, 98, 255), (205, 92, 92, 255), (255, 106, 106, 255), (238, 99, 99, 255), (205, 85, 85, 255), (139, 58, 58, 255), (75, 0, 130, 255), (255, 255, 240, 255), (255, 255, 240, 255), (238, 238, 224, 255), (205, 205, 193, 255), (139, 139, 131, 255), (240, 230, 140, 255), (255, 246, 143, 255), (238, 230, 133, 255), (205, 198, 115, 255), (139, 134, 78, 255), (230, 230, 250, 255), (255, 240, 245, 255), (255, 240, 245, 255), (238, 224, 229, 255), (205, 193, 197, 255), (139, 131, 134, 255), (124, 252, 0, 255), (255, 250, 205, 255), (255, 250, 205, 255), (238, 233, 191, 255), (205, 201, 165, 255), (139, 137, 112, 255), (173, 216, 230, 255), (191, 239, 255, 255), (178, 223, 238, 255), (154, 192, 205, 255), (104, 131, 139, 255), (240, 128, 128, 255), (224, 255, 255, 255), (224, 255, 255, 255), (209, 238, 238, 255), (180, 205, 205, 255), (122, 139, 139, 255), (238, 221, 130, 255), (255, 236, 139, 255), (238, 220, 130, 255), (205, 190, 112, 255), (139, 129, 76, 255), (250, 250, 210, 255), (144, 238, 144, 255), (255, 182, 193, 255), (255, 174, 185, 255), (238, 162, 173, 255), (205, 140, 149, 255), (139, 95, 101, 255), (255, 160, 122, 255), (255, 160, 122, 255), (238, 149, 114, 255), (205, 129, 98, 255), (139, 87, 66, 255), (32, 178, 170, 255), (135, 206, 250, 255), (176, 226, 255, 255), (164, 211, 238, 255), (141, 182, 205, 255), (96, 123, 139, 255), (132, 112, 255, 255), (176, 196, 222, 255), (202, 225, 255, 255), (188, 210, 238, 255), (162, 181, 205, 255), (110, 123, 139, 255), (255, 255, 224, 255), (255, 255, 224, 255), (238, 238, 209, 255), (205, 205, 180, 255), (139, 139, 122, 255), (250, 240, 230, 255), (0, 255, 0, 255), (50, 205, 50, 255), (255, 0, 255, 255), (255, 0, 255, 255), (238, 0, 238, 255), (205, 0, 205, 255), (139, 0, 139, 255), (176, 48, 96, 255), (255, 52, 179, 255), (238, 48, 167, 255), (205, 41, 144, 255), (139, 28, 98, 255), (102, 205, 170, 255), (0, 0, 205, 255), (186, 85, 211, 255), (224, 102, 255, 255), (209, 95, 238, 255), (180, 82, 205, 255), (122, 55, 139, 255), (147, 112, 219, 255), (171, 130, 255, 255), (159, 121, 238, 255), (137, 104, 205, 255), (93, 71, 139, 255), (60, 179, 113, 255), (123, 104, 238, 255), (0, 250, 154, 255), (72, 209, 204, 255), (199, 21, 133, 255), (25, 25, 112, 255), (245, 255, 250, 255), (255, 228, 225, 255), (255, 228, 225, 255), (238, 213, 210, 255), (205, 183, 181, 255), (139, 125, 123, 255), (255, 228, 181, 255), (0, 0, 128, 255), (0, 0, 128, 255), (253, 245, 230, 255), (128, 128, 0, 255), (107, 142, 35, 255), (192, 255, 62, 255), (179, 238, 58, 255), (154, 205, 50, 255), (105, 139, 34, 255), (255, 165, 0, 255), (255, 165, 0, 255), (238, 154, 0, 255), (205, 133, 0, 255), (139, 90, 0, 255), (255, 69, 0, 255), (255, 69, 0, 255), (238, 64, 0, 255), (205, 55, 0, 255), (139, 37, 0, 255), (218, 112, 214, 255), (255, 131, 250, 255), (238, 122, 233, 255), (205, 105, 201, 255), (139, 71, 137, 255), (152, 251, 152, 255), (154, 255, 154, 255), (144, 238, 144, 255), (124, 205, 124, 255), (84, 139, 84, 255), (238, 232, 170, 255), (175, 238, 238, 255), (187, 255, 255, 255), (174, 238, 238, 255), (150, 205, 205, 255), (102, 139, 139, 255), (219, 112, 147, 255), (255, 130, 171, 255), (238, 121, 159, 255), (205, 104, 137, 255), (139, 71, 93, 255), (255, 239, 213, 255), (255, 218, 185, 255), (255, 218, 185, 255), (238, 203, 173, 255), (205, 175, 149, 255), (139, 119, 101, 255), (205, 133, 63, 255), (255, 192, 203, 255), (255, 181, 197, 255), (238, 169, 184, 255), (205, 145, 158, 255), (139, 99, 108, 255), (221, 160, 221, 255), (255, 187, 255, 255), (238, 174, 238, 255), (205, 150, 205, 255), (139, 102, 139, 255), (176, 224, 230, 255), (160, 32, 240, 255), (155, 48, 255, 255), (145, 44, 238, 255), (125, 38, 205, 255), (85, 26, 139, 255), (255, 0, 0, 255), (255, 0, 0, 255), (238, 0, 0, 255), (205, 0, 0, 255), (139, 0, 0, 255), (188, 143, 143, 255), (255, 193, 193, 255), (238, 180, 180, 255), (205, 155, 155, 255), (139, 105, 105, 255), (65, 105, 225, 255), (72, 118, 255, 255), (67, 110, 238, 255), (58, 95, 205, 255), (39, 64, 139, 255), (250, 128, 114, 255), (255, 140, 105, 255), (238, 130, 98, 255), (205, 112, 84, 255), (139, 76, 57, 255), (139, 69, 19, 255), (244, 164, 96, 255), (46, 139, 87, 255), (84, 255, 159, 255), (78, 238, 148, 255), (67, 205, 128, 255), (46, 139, 87, 255), (255, 245, 238, 255), (255, 245, 238, 255), (238, 229, 222, 255), (205, 197, 191, 255), (139, 134, 130, 255), (160, 82, 45, 255), (255, 130, 71, 255), (238, 121, 66, 255), (205, 104, 57, 255), (139, 71, 38, 255), (192, 192, 192, 255), (135, 206, 235, 255), (135, 206, 255, 255), (126, 192, 238, 255), (108, 166, 205, 255), (74, 112, 139, 255), (106, 90, 205, 255), (131, 111, 255, 255), (122, 103, 238, 255), (105, 89, 205, 255), (71, 60, 139, 255), (0, 255, 127, 255), (0, 255, 127, 255), (0, 238, 118, 255), (0, 205, 102, 255), (0, 139, 69, 255), (70, 130, 180, 255), (99, 184, 255, 255), (92, 172, 238, 255), (79, 148, 205, 255), (54, 100, 139, 255), (210, 180, 140, 255), (255, 165, 79, 255), (238, 154, 73, 255), (205, 133, 63, 255), (139, 90, 43, 255), (0, 128, 128, 255), (216, 191, 216, 255), (255, 225, 255, 255), (238, 210, 238, 255), (205, 181, 205, 255), (139, 123, 139, 255), (255, 99, 71, 255), (255, 99, 71, 255), (238, 92, 66, 255), (205, 79, 57, 255), (139, 54, 38, 255), (64, 224, 208, 255), (0, 245, 255, 255), (0, 229, 238, 255), (0, 197, 205, 255), (0, 134, 139, 255), (238, 130, 238, 255), (208, 32, 144, 255), (255, 62, 150, 255), (238, 58, 140, 255), (205, 50, 120, 255), (139, 34, 82, 255), (245, 222, 179, 255), (255, 231, 186, 255), (238, 216, 174, 255), (205, 186, 150, 255), (139, 126, 102, 255), (255, 255, 0, 255), (255, 255, 0, 255), (238, 238, 0, 255), (205, 205, 0, 255), (139, 139, 0, 255), (154, 205, 50, 255)]
desc_text = ''


#buttons
buttons = {
    'G':(W//5, 10, 50, 50), # toggle gravity bool
    'M':(W//5*2, 10, 50, 50), # toggle motion bool
    'R':(W//5*3, 10, 50, 50), # toggle rotation bool
    'Q':(W//5*4, 10, 50, 50), # quit
}

#objects
for _ in range(objects_in_space):
    obj = SpaceObject(
        (randint(0, W), randint(0, H)), #pos
        randint(1, 10), #speed
        randint(0, 360), #angle
        30, #radis/size
        randint(3, 6), #sides
        choice(COLORS), #color
        randint(-2, 2) #angulat_rotaion_speed
    )
    obj_grp.add(obj)

#game loop
while not WindowShouldClose() and not ExitIt:

    MousePos = MouseX, MouseY = GetMouseX(), GetMouseY()
    CLICK = IsMouseButtonReleased(0)
    g_col = (80,80,80,255) if gravity_bool else c.RED

    #key input
    if IsKeyPressed(KEY_SPACE) or IsKeyPressed(KEY_G):
        gravity_bool = not gravity_bool
    elif IsKeyPressed(KEY_ENTER) or IsKeyPressed(KEY_M):
        motion_bool = not motion_bool
    elif IsKeyPressed(KEY_RIGHT_SHIFT) or IsKeyPressed(KEY_R):
        rotation_bool = not rotation_bool
    elif IsKeyPressed(KEY_Q):
        ExitIt = True

    #button press
    for key, rect in buttons.items():
        if CheckCollisionPointRec(MousePos, rect):
            if key == 'G':
                desc_text = 'Toggle Gravity'
                if CLICK:
                    gravity_bool = not gravity_bool
                break
            elif key == 'M':
                desc_text = 'Toggle Object Motion'
                if CLICK:
                    motion_bool = not motion_bool
                break
            elif key == 'R':
                desc_text = 'Toggle Object Rotation'
                if CLICK:
                    rotation_bool = not rotation_bool
                break
            elif key == 'Q':
                desc_text = 'Quit'
                if CLICK:
                    ExitIt = True
                break
        else:desc_text = ''

    if not desc_text and IsMouseButtonDown(0) and (GetMouseDelta().x or GetMouseDelta().y):
        gravity_angle = get_gravity_angle()

    #darws
    BeginDrawing()
    ClearBackground([200]*3)

    obj_grp.update()
    obj_grp.draw()
    draw_button()
    DrawText(bytes(desc_text, 'utf-8'), W//2-(len(desc_text)*12), H-50, 40, c.BLUE) # button description

    if not desc_text and IsMouseButtonDown(0):
        draw_ui()

    DrawFPS(10, H-30)
    EndDrawing()

print('\nProgram Closing')
CloseWindow()
